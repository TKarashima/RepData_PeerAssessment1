mtcars %>%
ggvis(~mpg) %>%
layer_histograms(width = input_slider(label = "Choose a binwidth:",
min = 1, max = 20))
data.tbl[ , table(date)]
DT <- data.table(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
DT[ , y := 2]
head(DT, 3)
DT[ , w := z^2]
DT
DT <- data.table(x = sample(letters[1:3], 1E5, TRUE))
head(DT, 3)
DT[ , .N, by = x] # counts the number of occurance of each letter under variable x
DT <- data.table(x = rep(c("a", "b", "c"), times = 300), y = rnorm(900))
head(DT, 15)
setkey(DT, x)
DT["a"]
data.tbl <- data.table(dat.raw)
setkey(data.tbl, date)
data.tbl[ , sum(steps, na.rm = TRUE), by = date]
data.tbl["2012-11-30"]
data.tbl["2012-11-09"]
data.tbl[ , sum := sum(steps, na.rm = TRUE), by = date]
data.tbl
DT <- data.table(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
DT[ ,setdiff(colnames(DT), "z"), with = FALSE]
DT[ , w := z^2]
DT[ , a := x > 0]
DT
DT[ , b := mean(x + w), by = a] # Mean of each group defined by "a"
DT
DT[ , b1 := sum(x), by = y] # Mean of each group defined by "a"
DT
DT[ , b1 := sum(x, na.rm = TRUE), by = y] # Mean of each group defined by "a"
DT
data.tbl <- data.table(dat.raw)
setkey(data.tbl, date)
data.tbl[ , sum1 := sum(steps, na.rm = TRUE), by = date]
data.tbl
data.tbl[ , sum(steps, na.rm = TRUE), by = date]
data.tbl[ , table(date)]
mean_by_day <- data.tbl[ , mean(steps, na.rm = TRUE), by = date]
mean_by_day
12608/288
sum_by_day <- data.tbl[ , sum(steps, na.rm = TRUE), by = date]
sum_by_day
colnames(sum_by_day)
sum_by_day %>% ggvis(~V1) %>% layer_histograms(width = 10000)
sum_by_day %>% ggvis(~V1) %>% layer_histograms(width = 5000)
sum_by_day %>% ggvis(~V1) %>% layer_histograms(width = 7000)
sum_by_day %>% ggvis(~V1) %>% layer_histograms(width = 8000)
sum_by_day %>% ggvis(~V1) %>% layer_histograms(width = 9000)
sum_by_day %>% ggvis(~V1) %>% layer_histograms(width = 4000)
sum_by_day %>% ggvis(~V1) %>% layer_histograms(width = 2000)
sum_by_day[V1 > 0] %>% ggvis(~V1) %>% layer_histograms(width = 2000)
names(sum_by_day)
names(sum_by_day)[2] <- "sum.day"
sum_by_day
sum_by_day <- data.tbl[ , sum(steps, na.rm = TRUE), by = date]
sum_by_day
setnames(sum_by_day, "V1", "sum.day")
sum_by_day
sum.day
sum_by_day
data.tbl
sum_by_day[list(1:10, 50:61),]
data.tbl <- data.table(dat.raw)
data.tbl
setkey(data.tbl, date)
sum_by_day <- data.tbl[ , .(sum.day = sum(steps, na.rm = TRUE)), by = date]
sum_by_day
sum_by_day[34:40]
sum_by_day[c(34:40, 50:61)]
sum_by_day[c(1:5,34:40, 50:61)]
sum_by_day[sum.day > 0] %>% ggvis(~sum.day) %>% layer_histograms(width = 2000,
boundary = 0)
sum_by_day[sum.day > 0] %>% ggvis(~sum.day) %>% layer_histograms(width = 1000,
boundary = 0)
sum_by_day[sum.day > 0] %>% ggvis(~sum.day) %>% layer_histograms(width = 1000,
center = 0)
sum_by_day[sum.day > 0] %>% ggvis(~sum.day) %>% layer_histograms(width = 2000,
center = 0)
sum_by_day[sum.day > 0] %>% ggvis(~sum.day) %>% layer_histograms(width = 2000,
boundary = 0)
sum_by_day[sum.day > 0, .(mean(sum.day), median(sum.day))]
sum_by_day[sum.day > 0, .(mean.day = mean(sum.day), median.day = median(sum.day))]
sum_by_day[sum.day > 0, .(mean = mean(sum.day), median = median(sum.day))]
sum_by_day
?ts
tables
tables()
data.tbl %>%
ggvis(~interval, ~steps, stroke := "skyblue") %>%
layer_lines() %>%
layer_points()
data.tbl %>%
ggvis(~interval, ~steps, stroke := "skyblue") %>%
layer_lines()
pressure %>% ggvis(~temperature, ~pressure) %>% layer_lines()
data.tbl %>%
ggvis(~interval, ~steps, stroke := "skyblue") %>%
layer_lines() %>% layer_points()
?plot
with(data.t)
with(data.tbl, plot(interval, steps, type = "l"))
?ts
data.times <- ts(dat.raw$steps, frequency = 1, start = 0)
plot(data.times)
plot.ts(data.times)
head(dat.raw)
dat.raw[steps == max(dat.raw$steps), ]
dat.raw["steps" == max(dat.raw$steps), ]
max(dat.raw$steps)
?max
max(dat.raw$steps, na.rm = TRUE)
dat.raw["steps" == max(dat.raw$steps, na.rm = TRUE), ]
dat.raw["steps" =max(dat.raw$steps, na.rm = TRUE), ]
data.tbl[steps == max(steps, na.rm = TRUE)]
data.tbl
dat.raw["steps" == "NA",]
subset(dat.raw, steps == 806)
subset(dat.raw, steps == max(steps, na.rm = TRUE))
?plot.ts
data.times
data.times[100:2--]
data.times[100:200]
data.times[1000:1200]
names(data.times)
plot.ts(data.times, ylab = "Steps", xlab = "5-min interval")
is.na(dat.raw$steps)
count.na <- is.na(dat.raw$steps)
library(TTR)
install.packages("TTr")
install.packages("TTR")
library(TTR)
data.times2 <- SMA(data.times, n=10)
?SMA
?ts
install.packages("mtsdi")
library(mtsdi)
data.times2 <- edaprep(data.times)
data.times2 <- edaprep(dat.raw)
data.times2 <- dat.raw
data.times2$steps <- edaprep(dat.raw$steps)
head(miss)
miss
data.times2 <- edaprep(dat.raw)
head(data.times2)
(24*60)/5
length(dat.raw$steps)
length(dat.raw$interval)
attach(dat.raw)
steps[1000]
steps[1030]
detach(dat.raw)
attach(dat.raw)
for(i in 1:length(steps)) {
if(steps[i] == "NA") {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
}
detach(dat.raw)
attach(dat.raw)
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
}
detach(dat.raw)
for(i in 1:100) {
if(i < 20){
next
}
print(i)
}
attach(dat.raw)
for(i in 1:length(steps)) {
if(!is.na(steps[i])) {
next
} else if(is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
}
detach(dat.raw)
head(dat.raw)
is.na(dat.raw$steps[1000])
is.na(dat.raw$steps[1001])
is.na(dat.raw$steps[10001])
!is.na(dat.raw$steps[10001])
dat.raw$steps[1000]
attach(dat.raw)
for(i in 1:length(steps)) {
if(!is.na(steps[i])) {
next
} else (is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
}
detach(dat.raw)
attach(dat.raw)
while(i in 1:length(steps)) {
if(!is.na(steps[i])) {
next
} else (is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
}
detach(dat.raw)
attach(dat.raw)
for(i in 1:length(steps)) {
if(!is.na(steps[i])) {
next
} else (is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
}
detach(dat.raw)
attach(dat.raw)
for(i in 1:length(steps)) {
if(!is.na(steps[i])) {
next()
} else (is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
}
detach(dat.raw)
with(dat.raw,
for(i in 1:length(steps)) {
if(!is.na(steps[i])) {
next()
} else (is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
})
with(dat.raw,
for(i in 1:length(steps)) {
if(!is.na(steps[i])) {
next
} else (is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
})
with(dat.raw,
for(i in 1:length(steps)) {
if(!is.na(steps[i])) {
next
} else(is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
})
?next
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288])
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288])
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288])
}
}
})
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288], na.rm = TRUE)
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288], na.rm = TRUE)
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288], na.rm = TRUE)
}
}
})
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
steps[i] <- mean(steps[i + 288], steps[i + 2*288], na.rm = TRUE)
} else if((i + 288) > length(steps)) {
steps[i] <- mean(steps[i - 288], steps[i - 2*288], na.rm = TRUE)
} else {
steps[i] <- mean(steps[i - 288], steps[i + 288], na.rm = TRUE)
}
}
})
dat.raw2 <- dat.raw
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- mean(steps[i + 288], steps[i + 2*288], na.rm = TRUE)
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- mean(steps[i - 288], steps[i - 2*288], na.rm = TRUE)
} else {
dat.raw2$steps[i] <- mean(steps[i - 288], steps[i + 288], na.rm = TRUE)
}
}
})
my.funct <- function() {
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- mean(steps[i + 288], steps[i + 2*288], na.rm = TRUE)
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- mean(steps[i - 288], steps[i - 2*288], na.rm = TRUE)
} else {
dat.raw2$steps[i] <- mean(steps[i - 288], steps[i + 288], na.rm = TRUE)
}
}
})
}
my.funct()
my.funct()
my.funct()
my.funct()
my.funct()
my.funct()
my.funct()
my.funct <- function() {
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- steps[i + 288]
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- steps[i - 288]
} else {
dat.raw2$steps[i] <- mean(steps[i - 288], steps[i + 288], na.rm = TRUE)
}
}
})
}
my.funct()
my.funct <- function() {
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- steps[i + 288]
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- steps[i - 288]
} else {
dat.raw2$steps[i] <- mean(steps[i - 288], steps[i + 288], na.rm = TRUE)
}
} else next
})
}
my.funct()
my.funct <- function() {
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- steps[i + 288]
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- steps[i - 288]
} else {
dat.raw2$steps[i] <- steps[i - 288]
}
} else next
})
}
my.funct()
my.funct <- function() {
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- 99999
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- 88888
} else {
dat.raw2$steps[i] <- 77777
}
} else next
})
}
my.funct()
head(dat.raw2)
is.na(dat.raw$steps[1])
my.funct <- function() {
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- 99999
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- 88888
} else {
dat.raw2$steps[i] <- 77777
}
} else {next}
})
}
my.funct()
head(dat.raw2)
str(dat.raw2)
with(dat.raw, steps[2])
with(dat.raw, steps[10000])
with(dat.raw, steps[10200])
with(dat.raw, length(steps))
with(dat.raw, is.na(steps[10000]))
with(dat.raw, is.na(steps[10200]))
str(dat.raw2)
my.funct <- function() {
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- 99999
next()
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- 88888
} else {
dat.raw2$steps[i] <- 77777
}
} else {next()}
})
}
my.funct()
dat.raw2
head(dat.raw2)
my.funct <- function() {
with(dat.raw,
for(i in 1:length(steps)) {
if(is.na(steps[i])) {
if((i - 288) < 0) {
dat.raw2$steps[i] <- 99999
} else if((i + 288) > length(steps)) {
dat.raw2$steps[i] <- 88888
} else {
dat.raw2$steps[i] <- 77777
}
} else {next()}
})
}
my.funct()
head(dat.raw2)
dat.raw2["steps" == 88888, ]
dat.raw2["steps" == NA, ]
dat.raw2[steps == NA, ]
dat.raw2[steps == 0, ]
24*60
dat.raw <- read.csv("activity.csv",
colClasses = c("integer", "character", "integer"))
str(dat.raw)
dat.raw
24*60/5
288*5
